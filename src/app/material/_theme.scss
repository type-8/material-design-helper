// Theming Docs: https://material.io/develop/web/theming/theming-guide

// Imports
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

@use './palette';
@use '@material/theme' with (
  $primary: map.get(palette.$pink, 200),
  $on-primary: palette.$black-text,
  $secondary: map.get(palette.$lighter-pink, 200),
  $on-secondary: palette.$black-text,
  $surface: map.get(palette.$pink, 200),
  $on-surface: palette.$black-text,
  $background: white
);


// Exports
@forward './palette';
@forward '@material/theme';


$light-text: palette.$black-text;
$dark-text:  palette.$white-text;

$light-divider: palette.$black-divider;
$dark-divider:  palette.$white-divider;


$light-foreground: (
  text: $light-text,
  // inverted-text: $dark-text,
  disabled-text: #00000042,
  secondary-text: #0000008a,
  divider: $light-divider,
);

$dark-foreground: (
  text: $dark-text,
  // inverted-text: $dark-text,
  disabled-text: #ffffff4d,
  secondary-text: #ffffffb3,
  divider: $dark-divider
);


$light-background: (
  base: white,
  inverted-base: black,

  primary: map.get(palette.$grey, 50),
  secondary: map.get(palette.$grey, 100),
  tertiary: map.get(palette.$grey, 300),

  card: white, // raised を含む,

  text: $light-text
);

$dark-background: (
  base: black,
  inverted-base: white,
  
  primary: map.get(palette.$grey, 800),
  secondary: #303030,
  tertiary: map.get(palette.$grey, 900),

  card: map.get(palette.$grey, 800), // raised を含む,

  text: $dark-text
);


$color-palette-keys: (primary, secondary, accent, warn);

$light-color-palette: (
  primary: (
    primary: map.get(palette.$pink, 200),
    secondary: map.get(palette.$lighter-pink, 200),
    surface: map.get(palette.$pink, 200),

    on-primary: map.get(palette.$pink, contrast, 200),
    on-secondary: map.get(palette.$lighter-pink, contrast, 200),
    on-surface: map.get(palette.$pink, contrast, 200)
  ),

  accent: (
    primary: map.get(palette.$light-blue, 200),
    secondary: map.get(palette.$lighter-light-blue, 200),
    surface: map.get(palette.$light-blue, 200),

    on-primary: map.get(palette.$light-blue, contrast, 200),
    on-secondary: map.get(palette.$lighter-light-blue, contrast, 200),
    on-surface: map.get(palette.$light-blue, contrast, 200)
  ),

  secondary: (
    primary: map.get(palette.$lighter-light-green, 500),
    secondary: map.get(palette.$lighter-light-green, 400),
    surface: map.get(palette.$lighter-light-green, 500),

    on-primary: map.get(palette.$lighter-light-green, contrast, 500),
    on-secondary: map.get(palette.$lighter-light-green, contrast, 400),
    on-surface: map.get(palette.$lighter-light-green, contrast, 500)
  ),

  warn: (
    primary: map.get(palette.$red, A200),
    secondary: map.get(palette.$lighter-red, A200),
    surface: map.get(palette.$red, A200),

    on-primary: map.get(palette.$red, contrast, A200),
    on-secondary: map.get(palette.$lighter-red, contrast, A200),
    on-surface: map.get(palette.$red, contrast, A200)
  ),
);

$dark-color-palette: (
  primary: (
    primary: map.get(palette.$purple, A200),
    secondary: map.get(palette.$purple, A100),
    surface: map.get(palette.$purple, A200),

    on-primary: map.get(palette.$purple, contrast, A200),
    on-secondary: map.get(palette.$purple, contrast, A100),
    on-surface: map.get(palette.$purple, contrast, A200)
  ),

  accent: (
    primary: map.get(palette.$amber, A200),
    secondary: map.get(palette.$amber, A100),
    surface: map.get(palette.$amber, A200),

    on-primary: map.get(palette.$amber, contrast, A200),
    on-secondary: map.get(palette.$amber, contrast, A100),
    on-surface: map.get(palette.$amber, contrast, A200)
  ),

  secondary: (
    primary: map.get(palette.$lighter-green, A200),
    secondary: map.get(palette.$lighter-green, A100),
    surface: map.get(palette.$lighter-green, A200),

    on-primary: map.get(palette.$lighter-light-green, contrast, A200),
    on-secondary: map.get(palette.$lighter-light-green, contrast, A100),
    on-surface: map.get(palette.$lighter-light-green, contrast, A200)
  ),

  warn: map.get($light-color-palette, warn) // 変えてもいいかも
);


// @description 背景色用のCSS変数を設定する
// @param { 'base' | 'primary' | 'secondary | 'tertiary' | 'card' | 'dark' | 'light' | color } $color
@mixin background-color($color) {
  @if meta.type-of($color) == color {
    &, .dark-theme .inverted-theme &,
    .dark-theme .inverted-theme#{&} {
      --mdc-theme-primary:   #{$color};
      --mdc-theme-secondary: #{$color};
      --mdc-theme-surface:   #{$color};
    }


  } @else {
    $_color: map.get($light-background, $color);
    &, .dark-theme .inverted-theme &,
    .dark-theme .inverted-theme#{&} {
      --mdc-theme-primary:    #{$_color};
      --mdc-theme-secondary:  #{$_color};
      --mdc-theme-surface:    #{$_color};
      --mdc-theme-background: #{$_color};
    }


    .dark-theme &, .inverted-theme &, .inverted-theme#{&} {
      $_color: map.get($dark-background, $color);

      --mdc-theme-primary:   #{$_color};
      --mdc-theme-secondary: #{$_color};
      --mdc-theme-surface:   #{$_color};
    }
  }
}


// @description 文字色用のCSS変数を設定する
// @param { 'light' | 'dark' | color } $color
@mixin text-color($color) {
  @if meta.type-of($color) == color {
    &, .dark-theme .inverted-theme &,
    .dark-theme .inverted-theme#{&} {
      --mdc-theme-on-primary:   #{$color};
      --mdc-theme-on-secondary: #{$color};
      --mdc-theme-on-surface:   #{$color};
    }


  } @else {
    $_color: if($color == dark, $dark-text, $light-text);

    &, .dark-theme .inverted-theme &,
    .dark-theme .inverted-theme#{&} {
      --mdc-theme-on-primary:   #{$_color};
      --mdc-theme-on-secondary: #{$_color};
      --mdc-theme-on-surface:   #{$_color};
    }

  
    .dark-theme &, .inverted-theme &, .inverted-theme#{&} {
      $_color: if($color == dark, $light-text, $dark-text);

      --mdc-theme-on-primary:   #{$_color};
      --mdc-theme-on-secondary: #{$_color};
      --mdc-theme-on-surface:   #{$_color};
    }
  }
}


// @param { 'light' | 'dark' | 'both' | null } $theme
// @param { map } $light,$dark
@function wrap-theme-map($theme, $light, $dark) {
  $map: null;

  @if ($theme == light) {
    $map: ( light: $light )

  } @else if ($theme == dark) {
    $map: ( dark: $dark );

  } @else {
    $map: (
      light: $light,
      dark: $dark
    );
  }

  @return $map;
}


// @param { 'light' | 'dark } $theme
@mixin wrap-theme-selector($theme) {
  @if $theme == dark {
    @if #{&} == ':root' {
      @at-root {
        .dark-theme,
        .inverted-theme {
          @content;
        }
      }

    } @else {
      $selector: if(&, &, null);
      .dark-theme #{$selector},
      .inverted-theme #{$selector} {
        @content;
      }
    }


  } @else {
    @content;

    @at-root {
      .dark-theme .inverted-theme {
        @content;
      }
    }
  }
}


// @description `foreground map`にある変数をcss変数として定義する
// @param { 'light' | 'dark' | 'both' | null } $theme
@mixin foreground($theme: null) {
  $foreground-map: wrap-theme-map($theme, $light-foreground, $dark-foreground);

  @each $theme-label, $palette in $foreground-map {
    @include wrap-theme-selector($theme-label) {
      @each $label, $color in $palette {
        --mdc-theme-fg-#{$label}: #{$color};
      }
    }
  }
}
@function get-foreground-color($key, $theme) {
  @return if(
    $theme == dark,
    (map.get($dark-foreground,  $key), --mdc-theme-bg-#{$key}),
    (map.get($light-foreground, $key), --mdc-theme-bg-#{$key})
  );
}
@function get-foreground-color-value($key, $theme: light) {
  $color: get-foreground-color($key, $theme);
  @return var(nth($color, 2), nth($color, 1));
}


// @description `background map`にある変数をcss変数として定義する
// @param { 'light' | 'dark' | 'both' | null } $theme
@mixin background($theme: null) {
  $background-map: wrap-theme-map($theme, $light-background, $dark-background);

  @each $theme-label, $palette in $background-map {
    @include wrap-theme-selector($theme-label) {
      @each $label, $color in $palette {
        --mdc-theme-bg-#{$label}: #{$color};
      }
    }
  }
}


// @description MDCの面倒なthemingを一括で済ませる関数
// @param { 'light' | 'dark' | 'both' | null } $theme
@mixin colors($theme: null) {
  $palette-map: wrap-theme-map($theme, $light-color-palette, $dark-color-palette);

  @each $theme-label, $palette in $palette-map {
    @include wrap-theme-selector($theme-label) {
      @each $color-label, $color-palette in $palette {
        .mdc-#{$color-label}.mdc-#{$color-label} {
          @each $label, $color in $color-palette {
            --mdc-theme-#{$label}: #{$color};
          }
        }
      };
    }
  }
}


$_color-ref: (
  light: (
    bg: $light-background,
    fg: $light-foreground,
    palette: $light-color-palette,
  ),
  dark: (
    bg: $dark-background,
    fg: $dark-foreground,
    palette: $dark-color-palette,
  )
);
@function get-color($theme, $key, $path) {
  $key: if(background == $key, bg, if(foreground == $key, fg, $key));

  $color: map.get($_color-ref, $theme, $key, $path...);
  $var-name: --mdc-theme-#{$key};

  @each $name in $path {
    $var-name: $var-name + '-' + $name;
  }

  @return ($color, $var-name);
}
@function get-color-value($key, $path...) {
  $color: get-color(light, $key, $path);
  @return var(nth($color, 2), nth($color, 1));
}



@mixin custom-ripple-transition() {
  & &__ripple::before {
    transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
    transition-duration: 120ms;
  }
}

